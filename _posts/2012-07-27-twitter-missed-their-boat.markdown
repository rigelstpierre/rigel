---
title: Twitter Missed Their Boat  
layout: post
---
 
I remember the day I signed up for Twitter. I saw an MTV News speical saying that Twitter was already been hailed as the next Facebook, we know that not to be true now, but I wanted to be in early. I created my account and now over 11,000 tweets latter I have close to 500 followers and follow a similar number of people. When I signed up I wasn't a developer, a designer or even really a "web geek", but many of Twitter's early users were. People loved the idea of being able to interface with data in a different way.

Twitter is one of the first web companies I ever was aware of to have an API. The Twitter API was and still is well written, well documented, and well designed. It's arguable that Twitter's success stem's from having an API. From people using Twitter OAuth to make it easy to sign onto others sites or services, to other's creating better way's to use Twitter. These apps made it really easy and made it easy for new people that weren't geeks to get on twitter. The API created a lot of success for them. Now their are hundendreds of Twitter mobile clients, almost any app has a "Sign In With Twitter" button, Apple has built it into both of their major platforms, iOS and Mountain Lion. People like Tapbots, Tweetdeck and Twitterrific have built successful businesses using the API. Where Twitter went wrong was not appealing more to these people. They saw the API as a byproduct not THE product. The bought the best apps, like Tweetdeck and Twitterific, they redesigned their Web apps both for Mobile and the desktop. They started figuring out how to pay for the party.

What they could have done and really should have done, was spent time looking into monetizing the API. All of these 3rd party apps have made billions of calls could have been charged even a small amount. Even if it was next to nothing, they could have at least made some money, a different kind of revenue, been a leader in the industry but now they are becoming an ad agency and to do os they may have to upset their core and most loyal users, Developer, Designers and Geeks.

Their is a new war happening on the web, the API Wars. Companies are now building services that have nothing more than API, that allow Developers to add their service as a feature in their apps. Companies like Stripe, and Twillo aren't focused on the end users. They are targeting the people that build the apps. Instead of focusing on the whole problem of communication, Twillo has created a foundation, the core that any app needs. Stripe does the hard work for developers that need to collect payments from users, allowing the devloper to focus on the pain point. Who ever came up with this concept first is brillant.

Now their are companies out their like [Mashape][mashape] and [Mashery][mashery], making it easy to find these API's, work with them, and for the creators of these API's to charge. Taking pages out of the books of Heroku and charging for great add on's. Addtional piece's of an API that not everyone needs but those who need are willing to pay for it and if they aren't then they aren't (and shouldn't care).Â 

So how can your startup start to be apart of this, do you have an API? Is your app built against your API? If you anwsered yes to the first question your heading in the right direction and if your building your app against that API your even more on your way. One of the greatest things Twitter has done from early on is their app is built against their API meaning if they want thier app to get better they have to refine, tweak and create new features in the API. Not all of these are going to be made public right away, if ever but no matter what the API won't just be a side project that a small team is working on.

The person who got me started in Development 2 years ago said this and even at that time not even knowing what Ruby or Rails was, this concept made sense. Odviously not ever app is going to be a twillo or stripe but why not look at trying to profit from a byproduct of your development. 37signals wrote about this in, Rework. It's a concept that really feels lost today. The open source movement is huge, bigger, clearer and easier than it's ever been. Thanks largely to Github, anyone can get invoved in an Open Source project, yet were scared about "someone stealing our ideas". Idea's aren't worth a dime it's all in the execution. Look at Twitter, their mobile apps suck for power users. Poorly laid out, slow, not ideal for someone who's on twitter constantly. Their API allowed Tapbots to recreate, and rethink what that experince is for a power user.

I've been using [Sam Soffes][samsoffes]new app, [Cheddar][cheddar], for the last few days trying it out and see if it can replace Hit List for me, but if I make the switch I'll want to import all my data from my Hit List Library. I'm an edge case, Cheddar will likely never support that, but because Sam allows almost full access to the users data via the API, if I choose to make that move I can write a tool to do that. I also have had feature ideas that I'd love in the app but again, edge case things that would make work flow faster and better.

Twitter missed their chance to do something different to look at creating revenue in a different way. Don't make the same mistakes Twitter made, look and see if you app has hidden value. Looking at your app this way may change your entire persepctive, change how you build future apps. You don't need to reinvent the wheel, just the rims they wheel sits on.

[mashape]:			http://mashape.com
[mashery]:      http://www.mashery.com/
[samsoffes]:    http://samsoff.es/
[cheddar]: 			https://cheddarapp.com/
